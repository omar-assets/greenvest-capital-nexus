
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';
import { useToast } from '@/hooks/use-toast';
import type { Database } from '@/integrations/supabase/types';

type Offer = Database['public']['Tables']['offers']['Row'];
type OfferInsert = Database['public']['Tables']['offers']['Insert'];
type OfferUpdate = Database['public']['Tables']['offers']['Update'];

export const useOffers = (dealId: string) => {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch offers for a specific deal
  const { data: offers = [], isLoading, error } = useQuery({
    queryKey: ['offers', dealId],
    queryFn: async () => {
      if (!user?.id || !dealId) return [];
      
      const { data, error } = await supabase
        .from('offers')
        .select('*')
        .eq('deal_id', dealId)
        .eq('user_id', user.id)
        .order('version', { ascending: false });

      if (error) throw error;
      return data as Offer[];
    },
    enabled: !!user?.id && !!dealId,
  });

  // Create offer mutation
  const createOffer = useMutation({
    mutationFn: async (offerData: Omit<OfferInsert, 'user_id' | 'deal_id' | 'offer_number'>) => {
      if (!user?.id) throw new Error('User not authenticated');

      // Calculate version number
      const maxVersion = offers.length > 0 ? Math.max(...offers.map(o => o.version)) : 0;
      const newVersion = maxVersion + 1;

      const { data, error } = await supabase
        .from('offers')
        .insert({
          ...offerData,
          user_id: user.id,
          deal_id: dealId,
          version: newVersion,
          offer_number: '', // Will be auto-generated by trigger
        })
        .select()
        .single();

      if (error) throw error;
      return data as Offer;
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['offers', dealId] });
      toast({
        title: "Offer Created",
        description: `Offer ${data.offer_number} has been created successfully.`,
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create offer. Please try again.",
        variant: "destructive",
      });
      console.error('Error creating offer:', error);
    },
  });

  // Update offer mutation
  const updateOffer = useMutation({
    mutationFn: async ({ id, ...updateData }: OfferUpdate & { id: string }) => {
      if (!user?.id) throw new Error('User not authenticated');

      const { data, error } = await supabase
        .from('offers')
        .update(updateData)
        .eq('id', id)
        .eq('user_id', user.id)
        .select()
        .single();

      if (error) throw error;
      return data as Offer;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['offers', dealId] });
      toast({
        title: "Offer Updated",
        description: "Offer has been updated successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to update offer. Please try again.",
        variant: "destructive",
      });
      console.error('Error updating offer:', error);
    },
  });

  // Delete offer mutation
  const deleteOffer = useMutation({
    mutationFn: async (offerId: string) => {
      if (!user?.id) throw new Error('User not authenticated');

      const { error } = await supabase
        .from('offers')
        .delete()
        .eq('id', offerId)
        .eq('user_id', user.id);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['offers', dealId] });
      toast({
        title: "Offer Deleted",
        description: "Offer has been deleted successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to delete offer. Please try again.",
        variant: "destructive",
      });
      console.error('Error deleting offer:', error);
    },
  });

  return {
    offers,
    isLoading,
    error,
    createOffer: createOffer.mutate,
    isCreating: createOffer.isPending,
    updateOffer: updateOffer.mutate,
    isUpdating: updateOffer.isPending,
    deleteOffer: deleteOffer.mutate,
    isDeleting: deleteOffer.isPending,
  };
};
